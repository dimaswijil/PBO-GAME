import pygame
import random
from pathlib import Path

# Inisialisasi Pygame
pygame.init()

# Konstanta
WIDTH, HEIGHT = 400, 600
FPS = 60
FRUIT_SPAWN_RATE = 160  # Frame rate untuk spawn buah
BOMB_SPAWN_RATE = 400   # Frame rate untuk spawn bom
MAX_SPEED = 10  # Batas kecepatan maksimum untuk buah dan bom

# Warna
WHITE = (65, 176, 223)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
BLUE = (0, 0, 255)

# Folder tempat file gambar disimpan
base_path = Path(__file__).parent / "assets"
top_score_path = Path(__file__).parent / "top_score.txt"

# Kelas untuk memuat asset
class Assets:
    def __init__(self):
        self.apple = base_path / "apple.png"
        self.banana = base_path / "banana.png"
        self.orange = base_path / "orange.png"
        self.grape = base_path / "grape.png"
        self.bomb = base_path / "bomb.png"
        self.basket = base_path / "basket.png"
        self.background = base_path / "background.png"

        self.FRUIT_IMAGES = {
            'apple': pygame.image.load(self.apple),
            'banana': pygame.image.load(self.banana),
            'orange': pygame.image.load(self.orange),
            'grape': pygame.image.load(self.grape),
        }

        self.BOMB_IMAGE = pygame.image.load(self.bomb)
        self.BASKET_IMAGE = pygame.image.load(self.basket)
        self.BACKGROUND_IMAGE = pygame.image.load(self.background)

assets = Assets()

# Kelas untuk mengelola skor tertinggi
class TopScoreManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.top_score = self._load_top_score()

    def _load_top_score(self):
        try:
            with open(self.file_path, "r") as file:
                return int(file.read().strip())
        except (FileNotFoundError, ValueError):
            with open(self.file_path, "w") as file:
                file.write("0")
            return 0

    def update_top_score(self, score):
        if score > self.top_score:
            self.top_score = score
            with open(self.file_path, "w") as file:
                file.write(str(self.top_score))

# Inisialisasi pengelola skor tertinggi
top_score_manager = TopScoreManager(top_score_path)

# Setup layar
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Fall Fruit and Bomb")

# Kelas untuk menu mulai
class StartMenu:
    def __init__(self, screen):
        self.screen = screen

    def display(self):
        font_title = pygame.font.Font(None, 56)  # Ukuran font yang lebih kecil
        font_option = pygame.font.Font(None, 48)  # Ukuran font untuk teks pilihan

        title_text = font_title.render("Fall Fruit and Bomb", True, BLUE)
        start_text = font_option.render("Press Enter to Start", True, GREEN)
        quit_text = font_option.render("Press ESC to Quit", True, RED)

        self.screen.fill(WHITE)
        self.background_image = pygame.transform.scale(assets.BACKGROUND_IMAGE, (WIDTH, HEIGHT))

        # Menempatkan teks judul di tengah
        title_rect = title_text.get_rect(center=(WIDTH // 2, HEIGHT // 3))
        self.screen.blit(title_text, title_rect)

        # Menempatkan teks pilihan di tengah
        start_rect = start_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        quit_rect = quit_text.get_rect(center=(WIDTH // 2, HEIGHT // 1.5))

        self.screen.blit(start_text, start_rect)
        self.screen.blit(quit_text, quit_rect)

        pygame.display.flip()

        waiting = True
        while waiting:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:  # Start game when ENTER is pressed
                        waiting = False
                    if event.key == pygame.K_ESCAPE:  # Quit game when ESC is pressed
                        pygame.quit()
                        quit()

# Kelas untuk layar Game Over
class GameOverScreen:
    def __init__(self, screen):
        self.screen = screen

    def display(self, score):
        font_title = pygame.font.Font(None, 72)
        font_option = pygame.font.Font(None, 48)

        title_text = font_title.render("Game Over", True, RED)
        score_text = font_option.render(f"Your Score: {score}", True, BLUE)
        top_score_text = font_option.render(f"Top Score: {top_score_manager.top_score}", True, YELLOW)
        restart_text = font_option.render("Press R to Restart", True, GREEN)
        quit_text = font_option.render("Press ESC to Quit", True, RED)

        self.screen.fill(WHITE)

        # Menempatkan teks Game Over dan skor di tengah
        title_rect = title_text.get_rect(center=(WIDTH // 2, HEIGHT // 3))
        score_rect = score_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        top_score_rect = top_score_text.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 30))
        restart_rect = restart_text.get_rect(center=(WIDTH // 2, HEIGHT // 1.5))
        quit_rect = quit_text.get_rect(center=(WIDTH // 2, HEIGHT // 1.2))

        self.screen.blit(title_text, title_rect)
        self.screen.blit(score_text, score_rect)
        self.screen.blit(top_score_text, top_score_rect)
        self.screen.blit(restart_text, restart_rect)
        self.screen.blit(quit_text, quit_rect)

        pygame.display.flip()

        waiting = True
        while waiting:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:  # Restart game when R is pressed
                        return True  # Indicating to restart the game
                    if event.key == pygame.K_ESCAPE:  # Quit game when ESC is pressed
                        pygame.quit()
                        quit()

# Kelas untuk Buah dan Bom
class Fruit:
    def __init__(self):
        self.type = random.choice(list(assets.FRUIT_IMAGES.keys()))
        self.image = assets.FRUIT_IMAGES[self.type]
        self.image = pygame.transform.scale(self.image, (30, 30))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, WIDTH - self.rect.width)
        self.rect.y = 0
        self.speed = 1

    def fall(self):
        self.rect.y += self.speed

class Bomb:
    def __init__(self):
        self.image = assets.BOMB_IMAGE
        self.image = pygame.transform.scale(self.image, (20, 30))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, WIDTH - self.rect.width)
        self.rect.y = 0
        self.speed = 1

    def fall(self):
        self.rect.y += self.speed

# Kelas untuk karakter pemain
class Player:
    def __init__(self):
        self.image = pygame.transform.scale(assets.BASKET_IMAGE, (50, 30))
        self.rect = self.image.get_rect()
        self.rect.x = WIDTH // 2
        self.rect.y = HEIGHT - 50

# Kelas utama game
class Game:
    def __init__(self):
        self.screen = screen
        self.clock = pygame.time.Clock()
        self.running = True
        self.score = 0
        self.fruits = []
        self.bombs = []
        self.frame_count = 0
        self.player = Player()
        self.background_image = pygame.transform.scale(assets.BACKGROUND_IMAGE, (WIDTH, HEIGHT))

    def spawn_objects(self):
        if self.frame_count % FRUIT_SPAWN_RATE == 0:
            fruit = Fruit()
            # Menambahkan kecepatan buah, dengan kenaikan 0.2 setiap 50 skor
            fruit.speed = 1 + (self.score // 50) * 0.2  # Kecepatan bertambah 0.2 setiap 50 skor
            fruit.speed = min(fruit.speed, MAX_SPEED)  # Menjaga kecepatan tidak melebihi MAX_SPEED
            self.fruits.append(fruit)
        if self.frame_count % BOMB_SPAWN_RATE == 0:
            bomb = Bomb()
            # Menambahkan kecepatan bom, dengan kenaikan 0.2 setiap 50 skor
            bomb.speed = 1 + (self.score // 50) * 0.2  # Kecepatan bertambah 0.2 setiap 50 skor
            bomb.speed = min(bomb.speed, MAX_SPEED)  # Menjaga kecepatan tidak melebihi MAX_SPEED
            self.bombs.append(bomb)


    def update_objects(self):
        for fruit in self.fruits[:]:
            fruit.fall()
            if fruit.rect.y > HEIGHT:
                self.fruits.remove(fruit)
            if fruit.rect.colliderect(self.player.rect):
                self.score += 10
                self.fruits.remove(fruit)

        for bomb in self.bombs[:]:
            bomb.fall()
            if bomb.rect.y > HEIGHT:
                self.bombs.remove(bomb)
            if bomb.rect.colliderect(self.player.rect):
                self.running = False

    def handle_input(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.player.rect.x > 0:
            self.player.rect.x -= 5
        if keys[pygame.K_RIGHT] and self.player.rect.x < WIDTH - self.player.rect.width:
            self.player.rect.x += 5

    def draw(self):
        self.screen.blit(self.background_image, (0, 0))
        for fruit in self.fruits:
            self.screen.blit(fruit.image, fruit.rect)
        for bomb in self.bombs:
            self.screen.blit(bomb.image, bomb.rect)
        self.screen.blit(self.player.image, self.player.rect)
        font = pygame.font.Font(None, 48)
        score_text = font.render(f'Score: {self.score}', True, BLUE)
        top_score_text = font.render(f'Top Score: {top_score_manager.top_score}', True, YELLOW)
        self.screen.blit(score_text, (10, 10))
        self.screen.blit(top_score_text, (10, 40))
        pygame.display.flip()

    def run(self):
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False

            self.handle_input()
            self.frame_count += 1
            self.spawn_objects()
            self.update_objects()
            self.draw()
            self.clock.tick(FPS)

        top_score_manager.update_top_score(self.score)

        # Setelah game selesai, tampilkan layar Game Over
        restart = game_over_screen.display(self.score)
        if restart:
            self.__init__()  # Restart the game by reinitializing the game object
            self.run()  # Restart the game loop

# Inisialisasi menu mulai dan layar Game Over
start_menu = StartMenu(screen)
game_over_screen = GameOverScreen(screen)

# Menjalankan game
if __name__ == "__main__":
    start_menu.display()
    game = Game()
    game.run()

